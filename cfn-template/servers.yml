Description: >
    Onyekachukwu Ejiofor Nweke | Udacity Cloud DevOps Student
    The project is to deploy an Apache Web Server for a highly
    available web app (Udagram) using AWS Cloud Formation.
    This template deploys the server infrastructure for the app.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    WebServerImageId:
        Type: AWS::EC2::Image::Id
        Description: Enter an AMI of ubuntu 18

    WebServerInstanceType:
        Type: String
        Description: Please enter the instance type for the web server

Resources:

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0

    WebServersSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts
          GroupName: WebServer SG
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0

    UdagramS3Role:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Description: Allow read only s3 permissions for ec2 resource(s)
          Path: /
          Policies:
            - PolicyName: AmazonS3ReadOnlyAccess
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action: s3:Get*
                    Resource: '*'

    UdacityProjectInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          Roles:
            - !Ref UdagramS3Role

    WebServersLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          BlockDeviceMappings:
            - DeviceName: /dev/sda1
              Ebs:
                DeleteOnTermination: true
                VolumeSize: 10
                VolumeType: gp2
          IamInstanceProfile: !Ref UdacityProjectInstanceProfile
          ImageId: !Ref WebServerImageId
          InstanceType: !Ref WebServerInstanceType
          SecurityGroups:
            - !Ref WebServersSecGroup
          UserData:
            Fn::Base64: |
              #!/bin/bash
              apt-get update -y
              apt-get install unzip awscli apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              rm index.html
              aws s3 cp s3://myudagramappbucket/udagram-app.zip .
              unzip -o udagram-app.zip
              systemctl restart apache2.service

    ALBTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckEnabled: true
          HealthCheckIntervalSeconds: 15
          HealthCheckPath: /
          HealthCheckPort: 80
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 3
          HealthyThresholdCount: 2
          Matcher:
            HttpCode: 200
          Port: 80
          Protocol: HTTP
          TargetGroupAttributes:
            - Key: deregistration_delay.timeout_seconds
              Value: 30
          TargetType: instance
          UnhealthyThresholdCount: 5
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"

    WebServersAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: Web Servers ASG
        DesiredCapacity: 2
        HealthCheckGracePeriod: 15
        HealthCheckType: ELB
        LaunchConfigurationName: !Ref WebServersLaunchConfiguration
        MaxSize: 4
        MinSize: 2
        TargetGroupARNs:
          - !Ref ALBTargetGroup
        VPCZoneIdentifier:
          - Fn::ImportValue:
              !Sub "${EnvironmentName}-PRIV-NETS"

    ALBWebServers:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: ipv4
        Scheme: internet-facing
        SecurityGroups:
          - !Ref LBSecGroup
        Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        Type: application

    ALBWebServersListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref ALBTargetGroup
            Type: forward
        LoadBalancerArn: !Ref ALBWebServers
        Port: 80
        Protocol: HTTP

    ALBWebServersListenerRule1:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - TargetGroupArn: !Ref ALBTargetGroup
            Type: forward
        Conditions:
          - Field: path-pattern
            Values:
              - /
        ListenerArn: !Ref ALBWebServersListener
        Priority: 1

Outputs:
  PublicUrlLoadBalancer:
    Description: Public HTTP Url of the Load Balancer
    Value: !Join [ '', [ 'http://', !GetAtt ALBWebServers.DNSName ] ]